// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name record_darwin
import AVFoundation
import Flutter
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import record_darwin
public enum AudioEncoder : Swift.String {
  case aacLc
  case aacEld
  case aacHe
  case amrNb
  case amrWb
  case opus
  case flac
  case pcm16bits
  case wav
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RecordConfig {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Device {
  @objc deinit
}
public enum RecorderError : Swift.Error {
  case error(message: Swift.String, details: Swift.String?)
}
public enum RecordState : Swift.Int {
  case pause
  case record
  case stop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AudioRecordingDelegate {
  func stop(completionHandler: @escaping (Swift.String?) -> ())
  func cancel() throws
  func getAmplitude() -> Swift.Float
  func pause()
  func resume() throws
  func dispose()
}
public protocol AudioRecordingFileDelegate : record_darwin.AudioRecordingDelegate {
  func start(config: record_darwin.RecordConfig, path: Swift.String) throws
}
public protocol AudioRecordingStreamDelegate : record_darwin.AudioRecordingDelegate {
  func start(config: record_darwin.RecordConfig, recordEventHandler: record_darwin.RecordStreamHandler) throws
}
@objc @_hasMissingDesignatedInitializers public class SwiftRecordPlugin : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func detachFromEngine(for registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StateStreamHandler : ObjectiveC.NSObject, Flutter.FlutterStreamHandler {
  @objc public func onListen(withArguments arguments: Any?, eventSink events: @escaping Flutter.FlutterEventSink) -> Flutter.FlutterError?
  @objc public func onCancel(withArguments arguments: Any?) -> Flutter.FlutterError?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RecordStreamHandler : ObjectiveC.NSObject, Flutter.FlutterStreamHandler {
  @objc public func onListen(withArguments arguments: Any?, eventSink events: @escaping Flutter.FlutterEventSink) -> Flutter.FlutterError?
  @objc public func onCancel(withArguments arguments: Any?) -> Flutter.FlutterError?
  @objc override dynamic public init()
  @objc deinit
}
extension record_darwin.AudioEncoder : Swift.Equatable {}
extension record_darwin.AudioEncoder : Swift.Hashable {}
extension record_darwin.AudioEncoder : Swift.RawRepresentable {}
extension record_darwin.RecordState : Swift.Equatable {}
extension record_darwin.RecordState : Swift.Hashable {}
extension record_darwin.RecordState : Swift.RawRepresentable {}
