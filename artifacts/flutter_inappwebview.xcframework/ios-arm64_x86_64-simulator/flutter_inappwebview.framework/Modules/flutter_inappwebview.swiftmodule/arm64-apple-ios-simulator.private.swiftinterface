// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name flutter_inappwebview
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import Flutter
import Foundation
import OrderedSet
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import flutter_inappwebview
@objc @_hasMissingDesignatedInitializers public class ChromeSafariBrowserManager : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public func open(id: Swift.String, url: Swift.String, options: [Swift.String : Any?], menuItemList: [[Swift.String : Any]], result: @escaping Flutter.FlutterResult)
  public func dispose()
  @objc deinit
}
@objc public class DownloadStartRequest : ObjectiveC.NSObject {
  public init(url: Swift.String, userAgent: Swift.String?, contentDisposition: Swift.String?, mimeType: Swift.String?, contentLength: Swift.Int64, suggestedFilename: Swift.String?, textEncodingName: Swift.String?)
  public func toMap() -> [Swift.String : Any?]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FlutterMethodCallDelegate : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class FlutterWebViewController : ObjectiveC.NSObject, Flutter.FlutterPlatformView {
  @objc public func view() -> UIKit.UIView
  public func makeInitialLoad(params: Foundation.NSDictionary)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class FlutterWebViewFactory : ObjectiveC.NSObject, Flutter.FlutterPlatformViewFactory {
  @objc public func createArgsCodec() -> any Flutter.FlutterMessageCodec & ObjectiveC.NSObjectProtocol
  @objc public func create(withFrame frame: CoreFoundation.CGRect, viewIdentifier viewId: Swift.Int64, arguments args: Any?) -> any Flutter.FlutterPlatformView
  @objc deinit
}
@objc public class HeadlessInAppWebView : flutter_inappwebview.FlutterMethodCallDelegate {
  public init(id: Swift.String, flutterWebView: flutter_inappwebview.FlutterWebViewController)
  override public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public func onWebViewCreated()
  public func prepare(params: Foundation.NSDictionary)
  public func setSize(size: flutter_inappwebview.Size2D)
  public func getSize() -> flutter_inappwebview.Size2D?
  public func dispose()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class HeadlessInAppWebViewManager : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public static func run(id: Swift.String, params: [Swift.String : Any?])
  public func dispose()
  @objc deinit
}
public enum HitTestResultType : Swift.Int {
  case unknownType
  case phoneType
  case geoType
  case emailType
  case imageType
  case srcAnchorType
  case srcImageAnchorType
  case editTextType
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class HitTestResult : ObjectiveC.NSObject {
  public init(type: flutter_inappwebview.HitTestResultType, extra: Swift.String?)
  public static func fromMap(map: [Swift.String : Any?]?) -> flutter_inappwebview.HitTestResult?
  public func toMap() -> [Swift.String : Any?]
  @objc deinit
}
public protocol InAppBrowserDelegate {
  func didChangeTitle(title: Swift.String?)
  func didStartNavigation(url: Foundation.URL?)
  func didUpdateVisitedHistory(url: Foundation.URL?)
  func didFinishNavigation(url: Foundation.URL?)
  func didFailNavigation(url: Foundation.URL?, error: any Swift.Error)
  func didChangeProgress(progress: Swift.Double)
}
@objc @_hasMissingDesignatedInitializers public class InAppBrowserManager : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public func prepareInAppBrowserWebViewController(options: [Swift.String : Any?]) -> flutter_inappwebview.InAppBrowserWebViewController
  public func open(arguments: Foundation.NSDictionary)
  public func presentViewController(webViewController: flutter_inappwebview.InAppBrowserWebViewController)
  public func openWithSystemBrowser(url: Swift.String, result: @escaping Flutter.FlutterResult)
  public func dispose()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class InAppBrowserNavigationController : UIKit.UINavigationController {
  @objc deinit
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class InAppBrowserOptions : flutter_inappwebview.Options<flutter_inappwebview.InAppBrowserWebViewController> {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class InAppBrowserWebViewController : UIKit.UIViewController, flutter_inappwebview.InAppBrowserDelegate, UIKit.UIScrollViewDelegate, WebKit.WKUIDelegate, UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func initLoad()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func prepareNavigationControllerBeforeViewWillAppear()
  @_Concurrency.MainActor @preconcurrency public func prepareWebView()
  @_Concurrency.MainActor @preconcurrency public func didChangeTitle(title: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func didStartNavigation(url: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public func didUpdateVisitedHistory(url: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public func didFinishNavigation(url: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public func didFailNavigation(url: Foundation.URL?, error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func didChangeProgress(progress: Swift.Double)
  @_Concurrency.MainActor @preconcurrency @objc public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor @preconcurrency public func show(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func hide(completion: (() -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func reload()
  @objc @_Concurrency.MainActor @preconcurrency public func share()
  @_Concurrency.MainActor @preconcurrency public func close(completion: (() -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func close()
  @objc @_Concurrency.MainActor @preconcurrency public func goBack()
  @objc @_Concurrency.MainActor @preconcurrency public func goForward()
  @objc @_Concurrency.MainActor @preconcurrency public func goBackOrForward(steps: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func setOptions(newOptions: flutter_inappwebview.InAppBrowserOptions, newOptionsMap: [Swift.String : Any])
  @_Concurrency.MainActor @preconcurrency public func getOptions() -> [Swift.String : Any?]?
  @_Concurrency.MainActor @preconcurrency public func dispose()
  @_Concurrency.MainActor @preconcurrency public func onBrowserCreated()
  @_Concurrency.MainActor @preconcurrency public func onExit()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class InAppWebView : WebKit.WKWebView, UIKit.UIScrollViewDelegate, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler, UIKit.UIGestureRecognizerDelegate, flutter_inappwebview.PullToRefreshDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func prepare()
  @_Concurrency.MainActor @preconcurrency public func prepareAndAddUserScripts()
  @_Concurrency.MainActor @preconcurrency public static func preWKWebViewConfiguration(options: flutter_inappwebview.InAppWebViewOptions?) -> WebKit.WKWebViewConfiguration
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency public func initializeWindowIdJS()
  @_Concurrency.MainActor @preconcurrency public func goBackOrForward(steps: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func canGoBackOrForward(steps: Swift.Int) -> Swift.Bool
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public func takeScreenshot(with: [Swift.String : Any?]?, completionHandler: @escaping (_ screenshot: Foundation.Data?) -> Swift.Void)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func createPdf(configuration: [Swift.String : Any?]?, completionHandler: @escaping (_ pdf: Foundation.Data?) -> Swift.Void)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func createWebArchiveData(dataCompletionHandler: @escaping (_ webArchiveData: Foundation.Data?) -> Swift.Void)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func saveWebArchive(filePath: Swift.String, autoname: Swift.Bool, completionHandler: @escaping (_ path: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func loadUrl(urlRequest: Foundation.URLRequest, allowingReadAccessTo: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public func postUrl(url: Foundation.URL, postData: Foundation.Data)
  @_Concurrency.MainActor @preconcurrency public func loadData(data: Swift.String, mimeType: Swift.String, encoding: Swift.String, baseUrl: Foundation.URL, allowingReadAccessTo: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public func loadFile(assetFilePath: Swift.String) throws
  @_Concurrency.MainActor @preconcurrency public func enablePluginScriptAtRuntime(flagVariable: Swift.String, enable: Swift.Bool, pluginScript: flutter_inappwebview.PluginScript)
  @_Concurrency.MainActor @preconcurrency public func clearCache()
  @_Concurrency.MainActor @preconcurrency public func injectDeferredObject(source: Swift.String, withWrapper jsWrapper: Swift.String?, completionHandler: ((Any?) -> Swift.Void)? = nil)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func injectDeferredObject(source: Swift.String, contentWorld: WebKit.WKContentWorld, withWrapper jsWrapper: Swift.String?, completionHandler: ((Any?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func evaluateJavaScript(_ javaScriptString: Swift.String, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func evaluateJavaScript(_ javaScript: Swift.String, frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld, completionHandler: ((Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func evaluateJavascript(source: Swift.String, completionHandler: ((Any?) -> Swift.Void)? = nil)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func evaluateJavascript(source: Swift.String, contentWorld: WebKit.WKContentWorld, completionHandler: ((Any?) -> Swift.Void)? = nil)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func callAsyncJavaScript(_ functionBody: Swift.String, arguments: [Swift.String : Any] = [:], frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld, completionHandler: ((Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func callAsyncJavaScript(functionBody: Swift.String, arguments: [Swift.String : Any], contentWorld: WebKit.WKContentWorld, completionHandler: ((Any?) -> Swift.Void)? = nil)
  @available(iOS 10.3, *)
  @_Concurrency.MainActor @preconcurrency public func callAsyncJavaScript(functionBody: Swift.String, arguments: [Swift.String : Any], completionHandler: ((Any?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func injectJavascriptFileFromUrl(urlFile: Swift.String, scriptHtmlTagAttributes: [Swift.String : Any?]?)
  @_Concurrency.MainActor @preconcurrency public func injectCSSCode(source: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func injectCSSFileFromUrl(urlFile: Swift.String, cssLinkHtmlTagAttributes: [Swift.String : Any?]?)
  @_Concurrency.MainActor @preconcurrency public func getCopyBackForwardList() -> [Swift.String : Any]
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, preferences: WebKit.WKWebpagePreferences, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy, WebKit.WKWebpagePreferences) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ view: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt message: Swift.String, defaultText defaultValue: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func onScrollChanged(startedByUser: Swift.Bool, oldContentOffset: CoreFoundation.CGPoint?)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, authenticationChallenge challenge: Foundation.URLAuthenticationChallenge, shouldAllowDeprecatedTLS decisionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webViewDidClose(_ webView: WebKit.WKWebView)
  @_Concurrency.MainActor @preconcurrency @objc public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency public func onLoadStart(url: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func onLoadStop(url: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func onLoadError(url: Swift.String?, error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func onLoadHttpError(url: Swift.String?, statusCode: Swift.Int, description: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func onProgressChanged(progress: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onFindResultReceived(activeMatchOrdinal: Swift.Int, numberOfMatches: Swift.Int, isDoneCounting: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func onScrollChanged(x: Swift.Int, y: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onZoomScaleChanged(newScale: Swift.Float, oldScale: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public func onOverScrolled(x: Swift.Int, y: Swift.Int, clampedX: Swift.Bool, clampedY: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func onDownloadStartRequest(request: flutter_inappwebview.DownloadStartRequest)
  @_Concurrency.MainActor @preconcurrency public func onLoadResourceCustomScheme(url: Swift.String, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func shouldOverrideUrlLoading(navigationAction: WebKit.WKNavigationAction, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onNavigationResponse(navigationResponse: WebKit.WKNavigationResponse, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onReceivedHttpAuthRequest(challenge: Foundation.URLAuthenticationChallenge, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onReceivedServerTrustAuthRequest(challenge: Foundation.URLAuthenticationChallenge, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onReceivedClientCertRequest(challenge: Foundation.URLAuthenticationChallenge, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func shouldAllowDeprecatedTLS(challenge: Foundation.URLAuthenticationChallenge, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onJsAlert(frame: WebKit.WKFrameInfo, message: Swift.String, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onJsConfirm(frame: WebKit.WKFrameInfo, message: Swift.String, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onJsPrompt(frame: WebKit.WKFrameInfo, message: Swift.String, defaultValue: Swift.String?, result: Flutter.FlutterResult?)
  @_Concurrency.MainActor @preconcurrency public func onConsoleMessage(message: Swift.String, messageLevel: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onUpdateVisitedHistory(url: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func onTitleChanged(title: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func onLongPressHitTestResult(hitTestResult: flutter_inappwebview.HitTestResult)
  @_Concurrency.MainActor @preconcurrency public func onCallJsHandler(handlerName: Swift.String, _callHandlerID: Swift.Int64, args: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func onWebContentProcessDidTerminate()
  @_Concurrency.MainActor @preconcurrency public func onPageCommitVisible(url: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func onDidReceiveServerRedirectForProvisionalNavigation()
  @_Concurrency.MainActor @preconcurrency public func isVideoPlayerWindow(_ notificationObject: Swift.AnyObject?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor @preconcurrency public func findAllAsync(find: Swift.String?, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func findNext(forward: Swift.Bool, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func clearMatches(completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func scrollTo(x: Swift.Int, y: Swift.Int, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func scrollBy(x: Swift.Int, y: Swift.Int, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func pauseTimers()
  @_Concurrency.MainActor @preconcurrency public func resumeTimers()
  @_Concurrency.MainActor @preconcurrency public func printCurrentPage(printCompletionHandler: ((_ completed: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func getContentHeight() -> Swift.Int64
  @_Concurrency.MainActor @preconcurrency public func zoomBy(zoomFactor: Swift.Float, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func getOriginalUrl() -> Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public func getZoomScale() -> Swift.Float
  @_Concurrency.MainActor @preconcurrency public func getSelectedText(completionHandler: @escaping (Any?, (any Swift.Error)?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func getHitTestResult(completionHandler: @escaping (flutter_inappwebview.HitTestResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func requestFocusNodeHref(completionHandler: @escaping ([Swift.String : Any?]?, (any Swift.Error)?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func requestImageRef(completionHandler: @escaping ([Swift.String : Any?]?, (any Swift.Error)?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func clearFocus()
  @_Concurrency.MainActor @preconcurrency public func getCertificate() -> flutter_inappwebview.SslCertificate?
  @_Concurrency.MainActor @preconcurrency public func isSecureContext(completionHandler: @escaping (_ isSecureContext: Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func canScrollVertically() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func canScrollHorizontally() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func enablePullToRefresh()
  @_Concurrency.MainActor @preconcurrency public func disablePullToRefresh()
  @_Concurrency.MainActor @preconcurrency public func createWebMessageChannel(completionHandler: ((flutter_inappwebview.WebMessageChannel) -> Swift.Void)? = nil) -> flutter_inappwebview.WebMessageChannel
  @_Concurrency.MainActor @preconcurrency public func postWebMessage(message: flutter_inappwebview.WebMessage, targetOrigin: Swift.String, completionHandler: ((Any?) -> Swift.Void)? = nil) throws
  @_Concurrency.MainActor @preconcurrency public func addWebMessageListener(webMessageListener: flutter_inappwebview.WebMessageListener) throws
  @_Concurrency.MainActor @preconcurrency public func disposeWebMessageChannels()
  @_Concurrency.MainActor @preconcurrency public func dispose()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers public class InAppWebViewMethodHandler : flutter_inappwebview.FlutterMethodCallDelegate {
  override public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public func dispose()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class InAppWebViewOptions : flutter_inappwebview.Options<flutter_inappwebview.InAppWebView> {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LeakAvoider : ObjectiveC.NSObject {
  public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  @objc deinit
}
extension Foundation.NSAttributedString {
  public static func fromMap(map: [Swift.String : Any?]?) -> Foundation.NSAttributedString?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class Options<T> : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class PluginScript : flutter_inappwebview.UserScript {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public init(groupName: Swift.String, source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, requiredInAllContentWorlds: Swift.Bool = false, messageHandlerNames: [Swift.String] = [])
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, in contentWorld: WebKit.WKContentWorld)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, in contentWorld: WebKit.WKContentWorld, requiredInAllContentWorlds: Swift.Bool = false, messageHandlerNames: [Swift.String] = [])
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public init(groupName: Swift.String, source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, in contentWorld: WebKit.WKContentWorld, requiredInAllContentWorlds: Swift.Bool = false, messageHandlerNames: [Swift.String] = [])
  @_Concurrency.MainActor @preconcurrency public func copyAndSet(groupName: Swift.String? = nil, source: Swift.String? = nil, injectionTime: WebKit.WKUserScriptInjectionTime? = nil, forMainFrameOnly: Swift.Bool? = nil, requiredInAllContentWorlds: Swift.Bool? = nil, messageHandlerNames: [Swift.String]? = nil) -> flutter_inappwebview.PluginScript
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func copyAndSet(groupName: Swift.String? = nil, source: Swift.String? = nil, injectionTime: WebKit.WKUserScriptInjectionTime? = nil, forMainFrameOnly: Swift.Bool? = nil, contentWorld: WebKit.WKContentWorld? = nil, requiredInAllContentWorlds: Swift.Bool? = nil, messageHandlerNames: [Swift.String]? = nil) -> flutter_inappwebview.PluginScript
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PluginScriptsUtil {
  public static let VAR_PLACEHOLDER_VALUE: Swift.String
  public static let VAR_FUNCTION_ARGUMENT_NAMES: Swift.String
  public static let VAR_FUNCTION_ARGUMENT_VALUES: Swift.String
  public static let VAR_FUNCTION_ARGUMENTS_OBJ: Swift.String
  public static let VAR_FUNCTION_BODY: Swift.String
  public static let VAR_RESULT_UUID: Swift.String
  public static let GET_SELECTED_TEXT_JS_SOURCE: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PullToRefreshControl : UIKit.UIRefreshControl, Flutter.FlutterPlugin {
  @_Concurrency.MainActor @preconcurrency public init(channel: Flutter.FlutterMethodChannel?, options: flutter_inappwebview.PullToRefreshOptions?)
  @_Concurrency.MainActor @preconcurrency @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @_Concurrency.MainActor @preconcurrency public func prepare()
  @_Concurrency.MainActor @preconcurrency @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  @_Concurrency.MainActor @preconcurrency public func onRefresh()
  @objc @_Concurrency.MainActor @preconcurrency public func updateShouldCallOnRefresh()
  @_Concurrency.MainActor @preconcurrency public func dispose()
  @objc deinit
}
public protocol PullToRefreshDelegate {
  func enablePullToRefresh()
  func disablePullToRefresh()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PullToRefreshOptions : flutter_inappwebview.Options<flutter_inappwebview.PullToRefreshControl> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, *)
@objcMembers public class SafariBrowserOptions : flutter_inappwebview.Options<flutter_inappwebview.SafariViewController> {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public class SafariViewController : SafariServices.SFSafariViewController, Flutter.FlutterPlugin, SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func prepareMethodChannel()
  @_Concurrency.MainActor @preconcurrency @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
  @_Concurrency.MainActor @preconcurrency @objc public func safariViewController(_ controller: SafariServices.SFSafariViewController, didCompleteInitialLoad didLoadSuccessfully: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func safariViewController(_ controller: SafariServices.SFSafariViewController, activityItemsFor URL: Foundation.URL, title: Swift.String?) -> [UIKit.UIActivity]
  @_Concurrency.MainActor @preconcurrency public func onChromeSafariBrowserOpened()
  @_Concurrency.MainActor @preconcurrency public func onChromeSafariBrowserCompletedInitialLoad()
  @_Concurrency.MainActor @preconcurrency public func onChromeSafariBrowserClosed()
  @_Concurrency.MainActor @preconcurrency public func dispose()
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(url URL: Foundation.URL, configuration: SafariServices.SFSafariViewController.Configuration)
  @available(iOS, introduced: 9.0, deprecated: 11.0)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(url URL: Foundation.URL, entersReaderIfAvailable: Swift.Bool)
}
@objc public class Size2D : ObjectiveC.NSObject {
  public init(width: Swift.Double, height: Swift.Double)
  public static func fromMap(map: [Swift.String : Any?]?) -> flutter_inappwebview.Size2D?
  public func toMap() -> [Swift.String : Any?]
  @objc deinit
}
@objc public class SslCertificate : ObjectiveC.NSObject {
  public init(x509Certificate: Foundation.Data)
  public func toMap() -> [Swift.String : Any?]
  @objc deinit
}
@objc public class SslError : ObjectiveC.NSObject {
  public init(errorType: Security.SecTrustResultType?)
  public func toMap() -> [Swift.String : Any?]
  @objc deinit
}
@objc public class SwiftFlutterPlugin : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  public init(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func detachFromEngine(for registrar: any Flutter.FlutterPluginRegistrar)
  @objc deinit
}
extension Foundation.URLAuthenticationChallenge {
  public func toMap() -> [Swift.String : Any?]
}
extension Foundation.URLCredential {
  public func toMap() -> [Swift.String : Any?]
}
extension Foundation.URLProtectionSpace {
  public func toMap() -> [Swift.String : Any?]
}
extension Foundation.URLRequest {
  public init(fromPluginMap: [Swift.String : Any?])
  public func toMap() -> [Swift.String : Any?]
}
extension Foundation.URLResponse {
  public func toMap() -> [Swift.String : Any?]
}
@objc @_Concurrency.MainActor @preconcurrency public class UserScript : WebKit.WKUserScript {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public init(groupName: Swift.String?, source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, in contentWorld: WebKit.WKContentWorld)
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public init(groupName: Swift.String?, source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, in contentWorld: WebKit.WKContentWorld)
  @_Concurrency.MainActor @preconcurrency public static func fromMap(map: [Swift.String : Any?]?, windowId: Swift.Int64?) -> flutter_inappwebview.UserScript?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Util {
  public static func getUrlAsset(assetFilePath: Swift.String) throws -> Foundation.URL
  public static func getAbsPathAsset(assetFilePath: Swift.String) throws -> Swift.String
  public static func convertToDictionary(text: Swift.String) -> [Swift.String : Any]?
  public static func JSONStringify(value: Any, prettyPrinted: Swift.Bool = false) -> Swift.String
  @available(iOS 14.0, *)
  public static func getContentWorld(name: Swift.String) -> WebKit.WKContentWorld
  @available(iOS 10.0, *)
  public static func getDataDetectorType(type: Swift.String) -> WebKit.WKDataDetectorTypes
  @available(iOS 10.0, *)
  public static func getDataDetectorTypeString(type: WebKit.WKDataDetectorTypes) -> [Swift.String]
  public static func getDecelerationRate(type: Swift.String) -> UIKit.UIScrollView.DecelerationRate
  public static func getDecelerationRateString(type: UIKit.UIScrollView.DecelerationRate) -> Swift.String
  public static func isIPv4(address: Swift.String) -> Swift.Bool
  public static func isIPv6(address: Swift.String) -> Swift.Bool
  public static func isIpAddress(address: Swift.String) -> Swift.Bool
  public static func normalizeIPv6(address: Swift.String) throws -> Swift.String
  @objc deinit
}
@objc public class WebMessage : ObjectiveC.NSObject {
  public init(data: Swift.String?, ports: [flutter_inappwebview.WebMessagePort]?)
  public func dispose()
  @objc deinit
}
@objc public class WebMessageChannel : flutter_inappwebview.FlutterMethodCallDelegate {
  public init(id: Swift.String)
  public func initJsInstance(webView: flutter_inappwebview.InAppWebView, completionHandler: ((flutter_inappwebview.WebMessageChannel) -> Swift.Void)? = nil)
  override public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public func onMessage(index: Swift.Int64, message: Swift.String?)
  public func toMap() -> [Swift.String : Any?]
  public func dispose()
  @objc deinit
}
@objc public class WebMessageListener : flutter_inappwebview.FlutterMethodCallDelegate {
  public init(id: Swift.String, jsObjectName: Swift.String, allowedOriginRules: Swift.Set<Swift.String>)
  public func assertOriginRulesValid() throws
  public func initJsInstance(webView: flutter_inappwebview.InAppWebView)
  public static func fromMap(map: [Swift.String : Any?]?) -> flutter_inappwebview.WebMessageListener?
  override public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  public func isOriginAllowed(scheme: Swift.String?, host: Swift.String?, port: Swift.Int?) -> Swift.Bool
  public func onPostMessage(message: Swift.String?, sourceOrigin: Foundation.URL?, isMainFrame: Swift.Bool)
  public func dispose()
  @objc deinit
}
@objc public class WebMessagePort : ObjectiveC.NSObject {
  public init(name: Swift.String, webMessageChannel: flutter_inappwebview.WebMessageChannel)
  public func setWebMessageCallback(completionHandler: ((Any?) -> Swift.Void)? = nil) throws
  public func postMessage(message: flutter_inappwebview.WebMessage, completionHandler: ((Any?) -> Swift.Void)? = nil) throws
  public func close(completionHandler: ((Any?) -> Swift.Void)? = nil) throws
  public func dispose()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class WebViewTransport : ObjectiveC.NSObject {
  @objc deinit
}
@available(iOS 14.0, *)
extension WebKit.WKContentWorld {
  @_Concurrency.MainActor @preconcurrency public static func fromMap(map: [Swift.String : Any?]?, windowId: Swift.Int64?) -> WebKit.WKContentWorld?
}
extension WebKit.WKFrameInfo {
  @_Concurrency.MainActor @preconcurrency public func toMap() -> [Swift.String : Any?]
}
extension WebKit.WKNavigationAction {
  @_Concurrency.MainActor @preconcurrency public func toMap() -> [Swift.String : Any?]
}
extension WebKit.WKNavigationResponse {
  @_Concurrency.MainActor @preconcurrency public func toMap() -> [Swift.String : Any?]
}
@available(iOS 9.0, *)
extension WebKit.WKSecurityOrigin {
  @_Concurrency.MainActor @preconcurrency public func toMap() -> [Swift.String : Any?]
}
extension WebKit.WKUserContentController {
  @_Concurrency.MainActor @preconcurrency public func initialize()
  @_Concurrency.MainActor @preconcurrency public func dispose(windowId: Swift.Int64?)
  @_Concurrency.MainActor @preconcurrency public func sync(scriptMessageHandler: any WebKit.WKScriptMessageHandler)
  @_Concurrency.MainActor @preconcurrency public func addUserOnlyScript(_ userOnlyScript: flutter_inappwebview.UserScript)
  @_Concurrency.MainActor @preconcurrency public func addUserOnlyScripts(_ userOnlyScripts: [flutter_inappwebview.UserScript])
  @_Concurrency.MainActor @preconcurrency public func addPluginScript(_ pluginScript: flutter_inappwebview.PluginScript)
  @_Concurrency.MainActor @preconcurrency public func addPluginScripts(_ pluginScripts: [flutter_inappwebview.PluginScript])
  @_Concurrency.MainActor @preconcurrency public func getPluginScriptsRequiredInAllContentWorlds() -> [flutter_inappwebview.PluginScript]
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func generateCodeForScriptEvaluation(scriptMessageHandler: any WebKit.WKScriptMessageHandler, source: Swift.String, contentWorld: WebKit.WKContentWorld) -> Swift.String
  @_Concurrency.MainActor @preconcurrency public func removeUserOnlyScript(_ userOnlyScript: flutter_inappwebview.UserScript)
  @_Concurrency.MainActor @preconcurrency public func removeUserOnlyScript(at index: Swift.Int, injectionTime: WebKit.WKUserScriptInjectionTime)
  @_Concurrency.MainActor @preconcurrency public func removeAllUserOnlyScripts()
  @_Concurrency.MainActor @preconcurrency public func removePluginScript(_ pluginScript: flutter_inappwebview.PluginScript)
  @_Concurrency.MainActor @preconcurrency public func removeAllPluginScripts()
  @_Concurrency.MainActor @preconcurrency public func removeAllPluginScriptMessageHandlers()
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func resetContentWorlds(windowId: Swift.Int64?)
  @_Concurrency.MainActor @preconcurrency public func removeUserOnlyScripts(with groupName: Swift.String, shouldAddPreviousScripts: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func removePluginScripts(with groupName: Swift.String, shouldAddPreviousScripts: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func containsPluginScript(with groupName: Swift.String) -> Swift.Bool
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func containsPluginScript(with groupName: Swift.String, in contentWorld: WebKit.WKContentWorld) -> Swift.Bool
  @available(iOS 14.0, *)
  @_Concurrency.MainActor @preconcurrency public func getContentWorlds(with windowId: Swift.Int64?) -> Swift.Set<WebKit.WKContentWorld>
}
extension WebKit.WKWindowFeatures {
  @_Concurrency.MainActor @preconcurrency public func toMap() -> [Swift.String : Any?]
}
extension flutter_inappwebview.HitTestResultType : Swift.Equatable {}
extension flutter_inappwebview.HitTestResultType : Swift.Hashable {}
extension flutter_inappwebview.HitTestResultType : Swift.RawRepresentable {}
