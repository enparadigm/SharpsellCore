// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name moengage_flutter_ios
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Flutter
import Foundation
import MoEngagePluginBase
import MoEngageSDK
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
@_exported import moengage_flutter_ios
@objc @_inheritsConvenienceInitializers public class MoEngageFlutterBridge : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc public func handle(_ call: Flutter.FlutterMethodCall, result: @escaping Flutter.FlutterResult)
  @objc override dynamic public init()
  @objc deinit
}
extension moengage_flutter_ios.MoEngageFlutterBridge : MoEngagePluginBase.MoEngagePluginBridgeDelegate {
  @objc dynamic public func sendMessage(event: Swift.String, message: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageInitializer : ObjectiveC.NSObject {
  @objc public static let sharedInstance: moengage_flutter_ios.MoEngageInitializer
  @available(*, deprecated, message: "use 'initializeDefaultInstance(config:sdkState:launchOptions:)'")
  @objc public func initializeDefaultInstance(_ config: MoEngageCore.MoEngageSDKConfig, sdkState: Swift.Bool = true, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil)
  @objc public func initializeDefaultInstance(config: MoEngageCore.MoEngageSDKConfig, sdkState: MoEngageCore.MoEngageSDKState = .enabled, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil)
  @objc public func initializeDefaultInstance(_ config: MoEngageCore.MoEngageSDKConfig, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil)
  @objc deinit
}
